* optimizing the operations tree
** De Morgan's: propagate NOTs down the tree...
** DONE Cancel nested NOTs
   CLOSED: [2013-03-03 Sun 19:39]
   - CLOSING NOTE [2013-03-03 Sun 19:39]

* Parser
** create the [[*optimizing%20the%20operations%20tree][optimizing the operations tree]] pass



* Overall
** DONE Handling NOT searches
   CLOSED: [2013-03-03 Sun 19:38]
   - CLOSING NOTE [2013-03-03 Sun 19:38]
*** DONE Would require storing a "global" index?
    CLOSED: [2013-03-03 Sun 16:20]
    - CLOSING NOTE [2013-03-03 Sun 16:20]
** DONE Saving, reading from files
   CLOSED: [2013-03-03 Sun 15:46]
   - CLOSING NOTE [2013-03-03 Sun 15:46]
** DONE Proper merging for OR, NOT queries
   CLOSED: [2013-03-04 Mon 20:19]
   - CLOSING NOTE [2013-03-04 Mon 20:19]
** DONE Proper printing format
   CLOSED: [2013-03-03 Sun 19:38]
   - CLOSING NOTE [2013-03-03 Sun 19:38]

** DONE README
   CLOSED: [2013-03-04 Mon 20:19]
   - CLOSING NOTE [2013-03-04 Mon 20:19]
** re-balance according to minimum working set costs


* autogen
    - parser.py:        # TODO
    - parser.py:        # TODO::using result sizes to move subtrees around...
    - search.py:    # TODO::make these methods return SkipLists as well, in order to
    - search.py:        TODO::modify merge_results for NOT.
    - search.py:        if op is Operation.OR: # TODO::implement a version of the
    - search.py:            raise Exception("TODO")
    - search.py:    def get_next_index(*args):  # TODO::args not decided upon
    - search.py:                raise Exception("TODO::Not implemented yet")
    - tests.py:        # TODO::test that the *right* skip pointers were created, i.e.
    - tests.py:        postings_file = {}      # TODO::create stub
    - tests.py:        dictionary_file = {}    # TODO::create stub
    - tests.py:        fifth = Tree("hello AND world OR hello AND NOT world") # TODO::test optimizations
